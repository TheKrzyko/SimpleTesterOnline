@using QuizData
@using JSInterop
<div class="card m-1" tabindex="0">
    <div class="card-header @(active? "bg-dark text-light": "text-black-50")">

        @question.title

    </div>
    <div class="card-body">


        <ol class="list-group m-3">
            
            @foreach (var answer in question.answers)
            {
                

            <li class="list-group-item-action rounded @GetAnswerClass(answer)">
                <label class="row no-gutters">
                    <input name="question-@question.number" type="radio"
                           value="@(answer.id)"
                           checked="@(selected == answer.id)"
                           @onchange="@(() => selected = answer.id)"
                           class="custom-radio col-auto align-self-start m-1"
                           disabled="@(!active)"/>
                    <span class="col">@(answer.text)</span>
                </label>
            </li>

                
            }
        </ol>


    </div>
    <div class="card-footer" hidden="@(!active)">
        <input type="button" class="btn btn-block btn-outline-primary" disabled="@(selected<0 || selected >= question.answers.Length)" value="Next" @onclick="@Next"/>
    </div>
</div>

@code {
    [Parameter]
    public Question question { get; set; }
    [Parameter]
    public bool active { get; set; } = true;
    [Parameter]
    public bool showCorrect { get; set; } = false;
    [Parameter]
    public Action<bool> onNext { get; set; }

    ElementReference reference;

    public int selected = -1;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        GlobalKey.onKeyUp += KeyUp;
    }

    private string GetAnswerClass(Answer answer)
    {
        if (!showCorrect)
            return "";

        if (answer.isCorrect)
            return "list-group-item-success";
        if (selected != answer.id)
            return "";
        return "list-group-item-danger";

    }
    public bool Verify()
    {
        return question.answers.All((ans) => !(ans.id == selected) || ans.isCorrect);
    }
    public void Next()
    {
        showCorrect = true;
        active = false;
        GlobalKey.onKeyUp -= KeyUp;
        this.StateHasChanged();
        onNext(Verify());
    }
    private void KeyUp(KeyboardEventArgs e)
    {
        Console.WriteLine("Clicked " + e.Key);
        int clickedDigit;
        if (e.Key == "Enter" && selected >=0 && selected < question.answers.Length)
        {
            Next();

        }
        else if(int.TryParse(e.Key, out clickedDigit))
        {
            if(clickedDigit >= 1 && clickedDigit <= question.answers.Count())
            {
                selected = clickedDigit -1;
                this.StateHasChanged();
            }
        }

    }
}
