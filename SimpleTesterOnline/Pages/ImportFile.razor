@page "/"
@inject IFileReaderService fileReaderService
@inject LocalAppStorage localStorage
@using QuizData
<MatHeadline4>SimpleTesterOnline</MatHeadline4>
<MatBlazor.MatDivider/>
<div class="alert alert-info" role="alert">
    <h4 class="alert-heading">Załaduj plik z pytaniami!</h4>
    <p>Program obsługuje pliki z rozszerzeniem .dat i .xml. Po załadowaniu możesz przejść do zakładki <NavLink href="random" class="alert-link">Losuj</NavLink>.</p>
    <hr>
    <p class="mb-0">Powodzenia w nauce! <br/>PS. Do odpowiadania możesz korzystać z klawiatury: 1,2,3,4 i Enter</p>
</div>

<input type="file" @ref="inputFileReference" @onchange="OnFileChanged"/>
<h5 class="h5 my-3">Przykładowe pytanie: </h5>
<div>
    
    @if (quiz != null)
    {
        <QuestionComponent question="quiz.questions[0]" />
    }
    
</div>
@code{
    ElementReference inputFileReference;

    private Quiz quiz { get; set; } = null;

    IFileReaderRef fileReaderReference;


    protected override void OnAfterRender(bool isFirstRender)
    {
        if(isFirstRender)
            fileReaderReference = fileReaderService.CreateReference(inputFileReference);
    }

    async Task OnFileChanged()
    {


        var files = (await fileReaderReference.EnumerateFilesAsync()).ToList();
        var file = files.First();
        var fileInfo = await file.ReadFileInfoAsync();
        var fileName = fileInfo.Name;
        var fileFormat = fileName.Split('.').Last();

        var memoryStream = await file.CreateMemoryStreamAsync();
        var parsers = new List<IQuizParser> { new DefaultQuizParser(), new XMLQuizParser(), new TXTQuizParser() };
        Quiz quiz = null;
        foreach(var parser in parsers)
        {
            try
            {
                memoryStream.Position = 0;
                quiz = parser.Load(memoryStream);
                break;
            }
            catch (Exception)
            {
                continue;
            }
        }
        if (quiz == null)
            return;

        quiz.fileName = fileName;
        localStorage.quiz = quiz;


        this.StateHasChanged();
    }

    protected override void OnInitialized()
    {
        localStorage.onQuizChange += this.StateHasChanged;
        quiz = localStorage.quiz;
        base.OnInitialized();
    }

}